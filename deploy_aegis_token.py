import json
from web3 import Web3
from web3.middleware import ExtraDataToPOAMiddleware # For Ganache PoA compatibility
import os

# --- Configuration ---
GANACHE_URL = "http://127.0.0.1:8545"
ABI_FILE_PATH = "AegisToken.abi.json"
BYTECODE_FILE_PATH = "AegisToken.bytecode.txt"
CONTRACT_ADDRESS_FILE = "AegisToken.address.txt"

def deploy_aegis_token_contract():
    """
    Connects to Ganache, deploys the AegisToken contract, and saves its address.
    """
    # 1. Connect to Ganache
    w3 = Web3(Web3.HTTPProvider(GANACHE_URL))
    
    # Inject PoA middleware for Ganache compatibility
    w3.middleware_onion.inject(ExtraDataToPOAMiddleware, layer=0)

    if not w3.is_connected(): # For web3.py v6+, use w3.is_listening() or just try a request
        try:
            w3.eth.block_number 
            print(f"Successfully connected to Ganache at {GANACHE_URL} (via request).")
        except Exception as e:
            print(f"Failed to connect to Ganache at {GANACHE_URL}. Error: {e}")
            print("Please ensure Ganache is running.")
            return False
    else: 
         print(f"Successfully connected to Ganache at {GANACHE_URL} (via is_connected()).")

    # 2. Set a default account (deployer and initialOwner)
    try:
        deployer_account = w3.eth.accounts[0]
        w3.eth.default_account = deployer_account # Set default account for contract deployment
        print(f"Using deployer account (and initialOwner): {deployer_account}")
    except Exception as e:
        print(f"Failed to get accounts from Ganache. Ensure Ganache is running with accounts. Error: {e}")
        return False

    # 3. Load ABI and Bytecode
    if not os.path.exists(ABI_FILE_PATH):
        print(f"Error: ABI file not found at {ABI_FILE_PATH}. Run compile_aegis_token.py first.")
        return False
    if not os.path.exists(BYTECODE_FILE_PATH):
        print(f"Error: Bytecode file not found at {BYTECODE_FILE_PATH}. Run compile_aegis_token.py first.")
        return False

    with open(ABI_FILE_PATH, 'r') as f:
        abi = json.load(f)
    with open(BYTECODE_FILE_PATH, 'r') as f:
        bytecode = f.read().strip()

    if not abi or not bytecode:
        print("Error: ABI or bytecode is empty. Please check the compilation output.")
        return False

    # 4. Deploy the contract
    AegisTokenContract = w3.eth.contract(abi=abi, bytecode=bytecode)

    print("Deploying AegisToken contract...")
    try:
        # The constructor for AegisToken takes 'initialOwner' as an argument
        tx_hash = AegisTokenContract.constructor(deployer_account).transact()
        print(f"Deployment transaction hash: {w3.to_hex(tx_hash)}")

        # 5. Wait for the transaction to be mined
        print("Waiting for transaction to be mined...")
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash, timeout=120)
        
        contract_address = tx_receipt.contractAddress
        if contract_address:
            print(f"AegisToken contract deployed successfully!")
            print(f"Contract Address: {contract_address}")

            # 6. Save the contract address to a file
            with open(CONTRACT_ADDRESS_FILE, 'w') as f:
                f.write(contract_address)
            print(f"Contract address saved to {CONTRACT_ADDRESS_FILE}")
            return True
        else:
            print("Error: Contract deployment failed, no contract address in receipt.")
            print(f"Full transaction receipt: {tx_receipt}")
            return False

    except Exception as e:
        print(f"An error occurred during contract deployment: {e}")
        return False

if __name__ == "__main__":
    print("--- Aegis Forge: AegisToken Contract Deployment Script ---")
    print("Prerequisites:")
    print("1. Ensure Ganache is running (e.g., `ganache` in another terminal).")
    print("2. Ensure `web3.py` is installed (`pip install web3`).")
    print("3. Ensure `AegisToken.abi.json` and `AegisToken.bytecode.txt` are present")
    print("   (generated by a script like `compile_aegis_token.py` from the previous step).")
    print("-" * 60)
    
    if deploy_aegis_token_contract():
        print("\nAegisToken deployment script finished successfully.")
    else:
        print("\nAegisToken deployment script encountered errors.")
